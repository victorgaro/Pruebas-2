INTRODUCCIÓN
Que es GIT
Sistema de control de versiones
Ayuda a ir formando una linea del tiempo de nuetro proyecto, registrando acontecimientos cada que nosotros desemos
Si el día 5 queremos ver como estaba el proyecto el día 2, esto sera posible
Es posible trabajr con más personas en la linea del tiempo del mismo proyecto

GitHub/Gitlab
Se pueden compartir proyectos
Trabajr colaborativamente
Ver trabajos de otros

Instalar Git en Windows
git-scm.com
Todo next

Nuevo Proyecto
Abrir Git bash
git config --global user.name "Victor Garcia"	//Registrar nuestro nombre en git
git config --global user.name			//Ver cual es el nombre que tenemos registrado en git
git config --global user.email "vic.garo.309@gmail.com"	//Registrar nuestro correo en git
git config --global user.email		//ver correo registrado

Tres áreas,secciones o arboles en Git 
-Directorio de trabajo o working área	//Donde estan alojados los archivos del proyecto del cual haremos ese folder un repositorio
-Index	//agregar archivos del repositorio al index. Si un archivo no esta agregado a esta zona GIT no podra saber que hubo cambios en el Todos los archivossimpre deben estar en el index
-Head área	//alberga el ultimo commit echo actual del proyecto. El último punto de guardado

Crear repositorio local y subir archivos
Desde el bash nos colocamos en la carpeta deseada de nuestra PC
git init	//Crea un repositorio local
git status	//Ver el status del repositorio
-Untracked files	//Archivos no traqueados, Archivos que NO han sido subidos al index área
git add NotasGit.txt	//Agregar archivos al index área. Los nombres de archivos no deben llevar espacios
git add -A		//Agregar todos los archivos de un directorio al index área
git rm --cached NotasGit.txt	//Quitar un archivo del index área

Commits
Punto de salvado al cual podremos regresar a ese punto del proyecto cuando queramos
git commit -m "Slider y foto de perfil"	//Hacer commmit y agregar un mensaje que lo describa 
git log		//consultar la lista de commits que se ha hecho al repositorio
Pasos para realizar un commit despues de un cambio:
	git status	//ver que archivos fueron modificados
	git add index.html	//agregar los archivos modificados al repositorio
	git commit -m "Se realizaron cambios"	//Hacer commit
	git log
	
Viajar a un commit o una rama en el repositorio
git checkout 48484gfs4e8w4e8	//clave del commit, se consulta en el log
	Abrimos el archivo o actulizamos el navegador y se vera el proyecto como estaba
	en el commit al que viajamos
git checkout master	//Regresar al ultimo commit realizado

RESET!
head		//status actual del proyecto, donde hicimos el ultimo salto o checkout
master		//ultimo commit realizado
reset		//saltos como los checkout pero borran a su paso
	-Reset soft: git reset --soft <id_commit>
	Deja el commit, indicado en el comando, como último SIN modificar el proyecto. El commit indicado ahora se convierte en el master, borra los commits posteriores
	-Reset hard: git reset --hard <id_commit>
	Deja el commit, indicado en el comando, como último modificando el proyecto con las características de dicho commit.

Ramas
-Espacios paralelos dentro de un mismo repositorio
-Cuando se crea una rama a partir de otra se crea en conjunto con los commits que ya tiene. Crea la rama conn todos los commits de master
-master tener la última versión del proyecto. Se pueden crear ramas alternas que cumplan con el mismo objetivo para no contaminar la rama master.
-Las ramas son muy utiles para hacer pruebas
	git branch	//ver las ramas del repositorio
	git branch NombreRama	//crear nueva rama
	git checkout pruebas	//posicionarnos en otra rama
	git merge Rama_A_Fusionar	//fusionar ramas. Nos pusicionamos en la rama con la cual queremos fusionar e indicamos el nombre de la otra rama a fusionar
	git branch NombreRama -d	//borrar ramas
	






















